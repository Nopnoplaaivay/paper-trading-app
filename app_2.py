import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import time
import random
import redis # <<< Th∆∞ vi·ªán Redis
import requests # <<< Th∆∞ vi·ªán g·ªçi API
import json
from datetime import datetime, timedelta
from enum import Enum # ƒê·ªÉ ƒë·ªãnh nghƒ©a Enum n·∫øu c·∫ßn

# --- C·∫•u h√¨nh (N√™n ƒë∆∞a v√†o file config ho·∫∑c env vars) ---
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0
API_BASE_URL = "http://localhost:8000/api/v1" # <<< URL c·ªßa Backend API
USER_ID_DEMO = "user_demo_123" # <<< ID ng∆∞·ªùi d√πng gi·∫£ l·∫≠p
AUTH_TOKEN_DEMO = "your_jwt_token_here" # <<< Token x√°c th·ª±c gi·∫£ l·∫≠p
REFRESH_INTERVAL_SECONDS = 2 # T·∫ßn su·∫•t l√†m m·ªõi giao di·ªán

# --- Enum (V√≠ d·ª• - N√™n import t·ª´ module chung) ---
class OrderSide(str, Enum):
    BUY = 'BUY'
    SELL = 'SELL'

class OrderStatus(str, Enum):
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'

# --- K·∫øt n·ªëi Redis ---
try:
    redis_client = redis.Redis(
        host=REDIS_HOST,
        port=REDIS_PORT,
        db=REDIS_DB,
        decode_responses=True, # T·ª± ƒë·ªông decode
        socket_timeout=1, # Timeout ng·∫Øn ƒë·ªÉ tr√°nh treo
        socket_connect_timeout=1
    )
    redis_client.ping() # Ki·ªÉm tra k·∫øt n·ªëi
    st.session_state.redis_connected = True
    print("Connected to Redis successfully.")
except redis.exceptions.ConnectionError as e:
    st.session_state.redis_connected = False
    print(f"Failed to connect to Redis: {e}")
    # Hi·ªÉn th·ªã l·ªói tr√™n UI ·ªü l·∫ßn ch·∫°y ƒë·∫ßu
    if 'redis_error_shown' not in st.session_state:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Redis t·∫°i {REDIS_HOST}:{REDIS_PORT}. D·ªØ li·ªáu realtime s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.", icon="üö®")
        st.session_state.redis_error_shown = True


# --- H√†m t∆∞∆°ng t√°c Backend/Cache ---

def get_data_from_redis(key_pattern: str, data_type: str = 'hash'):
    """H√†m ti·ªán √≠ch ƒë·ªçc d·ªØ li·ªáu t·ª´ Redis (c·∫ßn x·ª≠ l√Ω l·ªói t·ªët h∆°n)."""
    if not st.session_state.redis_connected:
        return {} if data_type == 'hash' else []

    try:
        if data_type == 'hash':
            # V√≠ d·ª• l·∫•y Hash (cho price, index)
            keys = redis_client.keys(key_pattern)
            data = {}
            for key in keys:
                # Gi·∫£ s·ª≠ key c√≥ d·∫°ng prefix:name
                name = key.split(':')[-1]
                data[name] = redis_client.hgetall(key)
            return data
        elif data_type == 'zset': # V√≠ d·ª• l·∫•y Sorted Set (cho order book)
             # key_pattern ·ªü ƒë√¢y l√† key c·ª• th·ªÉ, vd 'bid:VN30F2505'
             # withscores=True tr·∫£ v·ªÅ list of tuples [(value, score), ...]
             # score th∆∞·ªùng l√† gi√°, value l√† quantity ho·∫∑c ng∆∞·ª£c l·∫°i t√πy c√°ch l∆∞u
             return redis_client.zrange(key_pattern, 0, 4, withscores=True, desc=(key_pattern.startswith('bid'))) # L·∫•y top 5
        # Th√™m c√°c ki·ªÉu d·ªØ li·ªáu kh√°c n·∫øu c·∫ßn (string, list)
    except redis.exceptions.TimeoutError:
        print(f"Redis timeout fetching {key_pattern}")
        st.warning("Redis timeout.", icon="‚ö†Ô∏è")
    except Exception as e:
        print(f"Error fetching from Redis ({key_pattern}): {e}")
    return {} if data_type == 'hash' else []

def fetch_market_data():
    """L·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng t·ª´ Redis."""
    st.session_state.indices_real = get_data_from_redis("index:*")
    st.session_state.prices_real = get_data_from_redis("price:*")
    # L·∫•y OHLC n·∫øu c√≥ key ri√™ng
    st.session_state.ohlc_real = get_data_from_redis(f"ohlc:{st.session_state.get('current_symbol', 'VN30F2505')}")

    # L·∫•y Order Book cho m√£ hi·ªán t·∫°i
    symbol = st.session_state.get('current_symbol', 'VN30F2505')
    # Gi·∫£ s·ª≠ l∆∞u bids/asks v√†o Sorted Set, score l√† gi√°, value l√† KL (ho·∫∑c ng∆∞·ª£c l·∫°i)
    # C·∫ßn ƒëi·ªÅu ch·ªânh key v√† logic parse t√πy theo c√°ch l∆∞u trong Redis
    raw_bids = get_data_from_redis(f"bid:{symbol}", data_type='zset') # Gi√° cao nh·∫•t tr∆∞·ªõc
    raw_asks = get_data_from_redis(f"ask:{symbol}", data_type='zset') # Gi√° th·∫•p nh·∫•t tr∆∞·ªõc (desc=False m·∫∑c ƒë·ªãnh)

    # Chuy·ªÉn ƒë·ªïi sang format mong mu·ªën [[qty, price]] ho·∫∑c [[price, qty]]
    st.session_state.order_book_real = {
         # Gi·∫£ s·ª≠ value l√† KL, score l√† Gi√°
        "bids": [[float(qty), float(price)] for qty, price in raw_bids] if raw_bids else [],
        "asks": [[float(price), float(qty)] for qty, price in raw_asks] if raw_asks else [],
        # L·∫•y gi√° kh·ªõp cu·ªëi t·ª´ key price:* ho·∫∑c key ri√™ng
        "last_match_price": float(st.session_state.prices_real.get(symbol, {}).get('last_price', 0)),
        "last_match_vol": float(st.session_state.prices_real.get(symbol, {}).get('last_vol', 0)),
    }
    # L·∫•y chart data (c√≥ th·ªÉ t·ª´ Redis list, ho·∫∑c API kh√°c) - Ph·∫ßn n√†y ph·ª©c t·∫°p, t·∫°m b·ªè qua fetch realtime
    # st.session_state.chart_data_real = fetch_chart_data_from_source(symbol)

def call_api(method: str, endpoint: str, payload: Optional[dict] = None) -> Optional[dict]:
    """H√†m g·ªçi API backend."""
    headers = {"Authorization": f"Bearer {AUTH_TOKEN_DEMO}"} # <<< Th√™m header x√°c th·ª±c
    url = f"{API_BASE_URL}{endpoint}"
    try:
        if method.upper() == 'GET':
            response = requests.get(url, headers=headers, timeout=5)
        elif method.upper() == 'POST':
            response = requests.post(url, json=payload, headers=headers, timeout=10)
        # Th√™m c√°c method kh√°c (PUT, DELETE) n·∫øu c·∫ßn
        else:
            st.error(f"HTTP method kh√¥ng h·ª£p l·ªá: {method}")
            return None

        response.raise_for_status() # Raise l·ªói cho HTTP status codes >= 400
        return response.json() # Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON n·∫øu th√†nh c√¥ng

    except requests.exceptions.ConnectionError:
        st.error("L·ªói k·∫øt n·ªëi ƒë·∫øn API server.", icon="üö®")
    except requests.exceptions.Timeout:
        st.error("API request timeout.", icon="‚è±Ô∏è")
    except requests.exceptions.HTTPError as e:
        # C·ªë g·∫Øng parse l·ªói t·ª´ response body n·∫øu c√≥
        error_detail = str(e)
        try:
            error_json = e.response.json()
            error_detail = error_json.get("detail", error_detail)
        except json.JSONDecodeError:
            pass # Gi·ªØ l·ªói g·ªëc n·∫øu response kh√¥ng ph·∫£i JSON
        st.error(f"API Error {e.response.status_code}: {error_detail}", icon="üî•")
    except Exception as e:
        st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API: {e}", icon="‚ùì")
    return None

def fetch_account_info():
    """L·∫•y th√¥ng tin t√†i kho·∫£n v√† danh m·ª•c t·ª´ API."""
    balance_data = call_api('GET', f"/account/{USER_ID_DEMO}/balance")
    holdings_data = call_api('GET', f"/account/{USER_ID_DEMO}/holdings")
    orders_data = call_api('GET', f"/orders/{USER_ID_DEMO}/recent") # L·∫•y l·ªánh g·∫ßn ƒë√¢y

    if balance_data:
        st.session_state.account_real = balance_data # L∆∞u c·∫•u tr√∫c tr·∫£ v·ªÅ t·ª´ API
    if holdings_data:
        # Chuy·ªÉn list holdings t·ª´ API th√†nh dict ƒë·ªÉ d·ªÖ truy c·∫≠p
        st.session_state.holdings_real = {h['symbol']: h for h in holdings_data}
    if orders_data:
         st.session_state.orders_real = orders_data # L∆∞u list l·ªánh

# --- Kh·ªüi t·∫°o State (Ch·ªâ ch·∫°y l·∫ßn ƒë·∫ßu) ---
if 'last_fetch_time' not in st.session_state:
    st.session_state.last_fetch_time = 0
    st.session_state.current_symbol = "VN30F2505"
    st.session_state.selected_order_type = "LO"
    # Kh·ªüi t·∫°o c√°c state *_real v·ªõi gi√° tr·ªã r·ªóng/m·∫∑c ƒë·ªãnh
    st.session_state.indices_real = {}
    st.session_state.prices_real = {}
    st.session_state.ohlc_real = {}
    st.session_state.order_book_real = {"bids": [], "asks": [], "last_match_price": 0, "last_match_vol": 0}
    st.session_state.chart_data_real = [] # C·∫ßn fetch l·∫ßn ƒë·∫ßu n·∫øu mu·ªën hi·ªÉn th·ªã chart
    st.session_state.account_real = {"nav": 0, "cash": 0, "stock_value": 0, "buying_power": 0, "securing_amount": 0}
    st.session_state.holdings_real = {}
    st.session_state.orders_real = []
    # Fetch l·∫ßn ƒë·∫ßu
    if st.session_state.redis_connected:
        fetch_market_data()
    fetch_account_info() # Fetch t√†i kho·∫£n/l·ªánh l·∫ßn ƒë·∫ßu

# --- Logic C·∫≠p nh·∫≠t D·ªØ li·ªáu ƒê·ªãnh k·ª≥ ---
now = time.time()
if now - st.session_state.last_fetch_time > REFRESH_INTERVAL_SECONDS:
    st.session_state.last_fetch_time = now
    if st.session_state.redis_connected:
        fetch_market_data()
    # C√≥ th·ªÉ fetch l·∫°i account/orders ·ªü ƒë√¢y n·∫øu mu·ªën c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n h∆°n,
    # nh∆∞ng c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu kh√¥ng c√≥ thay ƒë·ªïi th∆∞·ªùng xuy√™n.
    # fetch_account_info()
    needs_rerun = True
else:
    needs_rerun = False

# --- Render Giao di·ªán (S·ª≠ d·ª•ng d·ªØ li·ªáu *_real t·ª´ st.session_state) ---

# --- H√†m Render (S·ª≠a ƒë·ªïi ƒë·ªÉ d√πng *_real data) ---
def display_index_tickers_real():
    indices = st.session_state.indices_real
    if not indices:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu index t·ª´ Redis.")
        return
    cols = st.columns(len(indices))
    i = 0
    for index, data in indices.items():
        try:
             # Parse data t·ª´ Redis (gi·∫£ s·ª≠ l√† string)
             value = float(data.get('value', 0))
             ref = float(data.get('ref', value)) # N·∫øu kh√¥ng c√≥ ref, coi nh∆∞ kh√¥ng ƒë·ªïi
             change = value - ref
             pct_change = (change / ref) * 100 if ref else 0

             delta_color = "off"
             if change > 0: delta_color = "normal"
             elif change < 0: delta_color = "inverse"
             with cols[i]:
                 st.metric(
                     label=index,
                     value=f"{value:,.2f}",
                     delta=f"{change:,.2f} ({pct_change:.2f}%)",
                     delta_color=delta_color
                 )
        except Exception as e:
             with cols[i]:
                  st.error(f"L·ªói index {index}")
                  print(f"Error parsing index {index} data {data}: {e}")
        i += 1

def display_chart_real():
    st.subheader(f"Bi·ªÉu ƒë·ªì {st.session_state.current_symbol}")
    # TODO: L·∫•y v√† v·∫Ω chart_data_real n·∫øu c√≥
    if not st.session_state.get('chart_data_real'):
         st.info("Ch∆∞a c√≥ d·ªØ li·ªáu bi·ªÉu ƒë·ªì.")
         # C√≥ th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì tƒ©nh ho·∫∑c g·ªçi API l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ ·ªü ƒë√¢y
         return
    # (Logic v·∫Ω Plotly t∆∞∆°ng t·ª± v√≠ d·ª• tr∆∞·ªõc, d√πng st.session_state.chart_data_real)


def display_price_info_real():
    symbol = st.session_state.current_symbol
    price_data = st.session_state.prices_real.get(symbol, {})
    ohlc_data = st.session_state.ohlc_real # ƒê√£ fetch cho symbol hi·ªán t·∫°i

    try:
        price = float(price_data.get('last_price', 0))
        ref = float(price_data.get('ref', price))
        change = price - ref
        pct_change = (change / ref) * 100 if ref else 0

        open_p = float(ohlc_data.get('open', 0))
        high_p = float(ohlc_data.get('high', 0))
        low_p = float(ohlc_data.get('low', 0))
        close_p = price # L·∫•y gi√° hi·ªán t·∫°i l√†m close
        volume = int(price_data.get('volume', 0))
        ceil_p = float(price_data.get('ceil', 0))
        floor_p = float(price_data.get('floor', 0))

        delta_color = "off"
        if change > 0: delta_color = "normal"
        elif change < 0: delta_color = "inverse"

        col1, col2 = st.columns([2, 3])
        with col1:
            st.subheader(symbol)
        with col2:
            st.metric(label="Gi√° hi·ªán t·∫°i", value=f"{price:,.1f}", delta=f"{change:+.2f} ({pct_change:+.2f}%)", delta_color=delta_color)

        c1, c2, c3, c4, c5 = st.columns(5)
        c1.metric("M·ªü", f"{open_p:,.1f}")
        c2.metric("Cao", f"{high_p:,.1f}")
        c3.metric("Th·∫•p", f"{low_p:,.1f}")
        c4.metric("ƒê√≥ng", f"{close_p:,.1f}") # Hi·ªÉn th·ªã gi√° hi·ªán t·∫°i nh∆∞ gi√° ƒë√≥ng g·∫ßn nh·∫•t
        c5.metric("KL", f"{volume:,}")

        st.divider()
        c1, c2, c3 = st.columns(3)
        c1.markdown(f"**TC:** <span style='color:#f4b400;'>{ref:,.1f}</span>", unsafe_allow_html=True)
        c2.markdown(f"**Tr·∫ßn:** <span style='color:#db4437;'>{ceil_p:,.1f}</span>", unsafe_allow_html=True)
        c3.markdown(f"**S√†n:** <span style='color:#0f9d58;'>{floor_p:,.1f}</span>", unsafe_allow_html=True)

    except Exception as e:
        st.error(f"L·ªói hi·ªÉn th·ªã th√¥ng tin gi√° cho {symbol}.")
        print(f"Error parsing price/ohlc data {price_data}, {ohlc_data}: {e}")


def display_order_book_real():
    st.subheader("B∆∞·ªõc gi√° - Kh·ªõp l·ªánh")
    ob = st.session_state.order_book_real
    stock = st.session_state.prices_real.get(st.session_state.current_symbol, {})
    ref_price = float(stock.get('ref', 0))

    col1, col2, col3 = st.columns([2, 1, 2])

    with col1: # Bids (KL Mua - Gi√° Mua)
        st.markdown("**KL Mua** | **Gi√° Mua**")
        if not ob['bids']: st.caption("...")
        for qty, price in ob['bids']: # ƒê√£ sort s·∫µn t·ª´ Redis ZRANGE DESC
             st.markdown(f"<span style='color:grey;'>{int(qty):,}</span> | <span style='color:#0f9d58; font-weight:bold;'>{price:,.1f}</span>", unsafe_allow_html=True)

    with col2: # Last Match
         price = ob['last_match_price']
         vol = ob['last_match_vol']
         color_cls = "green" if price >= ref_price else "red"
         if price == ref_price: color_cls = "orange"
         st.markdown(f"""
         <div style='text-align: center; border-top: 1px solid #ccc; border-bottom: 1px solid #ccc; padding: 10px 0; margin: 5px 0;'>
              <span style='color:{color_cls}; font-weight: bold; font-size: 1.2em;'>{price:,.1f}</span><br/>
              <span style='color:grey; font-size: 0.9em;'>{vol:,.0f}</span>
         </div>
         """, unsafe_allow_html=True)

    with col3: # Asks (Gi√° B√°n - KL B√°n)
        st.markdown("**Gi√° B√°n** | **KL B√°n**")
        if not ob['asks']: st.caption("...")
        for price, qty in ob['asks']: # ƒê√£ sort s·∫µn t·ª´ Redis ZRANGE ASC
             st.markdown(f"<span style='color:#db4437; font-weight:bold;'>{price:,.1f}</span> | <span style='color:grey;'>{int(qty):,}</span>", unsafe_allow_html=True)

def display_order_entry_real():
    st.subheader("ƒê·∫∑t L·ªánh")
    acc = st.session_state.account_real
    # L·∫•y gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i ƒë·ªÉ t√≠nh to√°n
    current_price = st.session_state.order_book_real.get('last_match_price', 0)

    default_symbol = st.session_state.current_symbol
    order_symbol = st.text_input("M√£ CK:", value=default_symbol, key="order_symbol_input").upper()
    # C·∫≠p nh·∫≠t symbol ƒëang xem n·∫øu ng∆∞·ªùi d√πng nh·∫≠p m√£ kh√°c
    if order_symbol != st.session_state.current_symbol:
        st.session_state.current_symbol = order_symbol
        # Fetch l·∫°i data cho m√£ m·ªõi
        if st.session_state.redis_connected:
             fetch_market_data() # L·∫•y gi√°, s·ªï l·ªánh m·ªõi
        st.rerun() # Ch·∫°y l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t UI v·ªõi m√£ m·ªõi

    order_type = st.radio(
        "Lo·∫°i l·ªánh:", ("LO", "MP"),
        index=0 if st.session_state.selected_order_type == "LO" else 1,
        horizontal=True, key="order_type_radio_real"
    )
    st.session_state.selected_order_type = order_type

    limit_price = None
    price_input_disabled = (order_type != "LO")
    limit_price_value = current_price if order_type == "LO" else 0.0
    if order_type == "LO":
        limit_price = st.number_input("Gi√° ƒë·∫∑t:", min_value=0.1, value=limit_price_value, step=0.1, format="%.1f", key="limit_price_input")

    quantity = st.number_input("KL ƒë·∫∑t:", min_value=1, value=1, step=1, key="quantity_input")

    # T√≠nh to√°n s·ª©c mua/b√°n
    current_holding = st.session_state.holdings_real.get(order_symbol)
    # available_shares = current_holding['quantity'] - current_holding.get('locked_quantity', 0) if current_holding else 0 # N·∫øu c√≥ locked_qty
    available_shares = current_holding['quantity'] if current_holding else 0
    price_for_calc = limit_price if order_type == "LO" and limit_price else current_price
    max_buy_qty = int(acc['buying_power'] // price_for_calc) if price_for_calc > 0 else 0

    col1, col2 = st.columns(2)
    # Bi·∫øn c·ªù ƒë·ªÉ ch·ªâ rerun M·ªòT L·∫¶N sau khi nh·∫•n n√∫t
    trigger_rerun = False
    with col1:
        if st.button("MUA", type="primary", use_container_width=True, key="buy_button"):
            payload = {
                "symbol": order_symbol,
                "side": OrderSide.BUY.value,
                "quantity": quantity,
                "order_type": order_type,
                "limit_price": int(limit_price * 10) if limit_price else None # G·ª≠i gi√° nguy√™n n·∫øu API y√™u c·∫ßu
            }
            st.write("ƒêang g·ª≠i l·ªánh MUA...") # Ph·∫£n h·ªìi t·∫°m th·ªùi
            api_response = call_api('POST', '/orders', payload=payload)
            if api_response and api_response.get("status") == "PENDING": # Ki·ªÉm tra response th√†nh c√¥ng t·ª´ API
                st.success(f"L·ªánh MUA {quantity} {order_symbol} ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng (ID: {api_response.get('order_id','N/A')}).")
                # Fetch l·∫°i th√¥ng tin t√†i kho·∫£n v√† l·ªánh sau khi ƒë·∫∑t th√†nh c√¥ng
                fetch_account_info()
                trigger_rerun = True
            else:
                # call_api ƒë√£ hi·ªÉn th·ªã l·ªói chi ti·∫øt
                st.warning("G·ª≠i l·ªánh MUA th·∫•t b·∫°i.")

    with col2:
        if st.button("B√ÅN", use_container_width=True, key="sell_button"):
            payload = {
                "symbol": order_symbol,
                "side": OrderSide.SELL.value,
                "quantity": quantity,
                "order_type": order_type,
                "limit_price": int(limit_price * 10) if limit_price else None
            }
            st.write("ƒêang g·ª≠i l·ªánh B√ÅN...")
            api_response = call_api('POST', '/orders', payload=payload)
            if api_response and api_response.get("status") == "PENDING":
                st.success(f"L·ªánh B√ÅN {quantity} {order_symbol} ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng (ID: {api_response.get('order_id','N/A')}).")
                fetch_account_info()
                trigger_rerun = True
            else:
                st.warning("G·ª≠i l·ªánh B√ÅN th·∫•t b·∫°i.")

    st.caption(f"Mua t·ªëi ƒëa: {max_buy_qty:,} | B√°n t·ªëi ƒëa: {available_shares:,}")

    # Ch·ªâ rerun n·∫øu c√≥ n√∫t ƒë∆∞·ª£c nh·∫•n v√† API g·ªçi th√†nh c√¥ng (ho·∫∑c th·∫•t b·∫°i nh∆∞ng mu·ªën refresh)
    if trigger_rerun:
         time.sleep(0.5) # ƒê·ª£i ch√∫t ƒë·ªÉ user th·∫•y message
         st.rerun()


def display_balance_real():
    st.subheader("T√†i s·∫£n")
    acc = st.session_state.account_real
    st.metric("T√ÄI S·∫¢N R√íNG", f"{acc.get('nav', 0):,.0f}")
    st.metric("Ti·ªÅn", f"{acc.get('cash', 0):,.0f}")
    st.metric("Gi√° tr·ªã c·ªï phi·∫øu", f"{acc.get('stock_value', 0):,.0f}")
    st.metric("S·ª©c mua", f"{acc.get('buying_power', 0):,.0f}")
    st.metric("Ti·ªÅn ƒëang kh√≥a", f"{acc.get('securing_amount', 0):,.0f}")

def display_holdings_real():
    st.subheader("Deal n·∫Øm gi·ªØ")
    holdings = st.session_state.holdings_real
    prices = st.session_state.prices_real # L·∫•y gi√° TT t·ª´ cache
    if not holdings:
        st.info("Ch∆∞a n·∫Øm gi·ªØ c·ªï phi·∫øu n√†o.")
        return

    data_for_df = []
    for symbol, h_data in holdings.items():
        # L·∫•y gi√° th·ªã tr∆∞·ªùng m·ªõi nh·∫•t t·ª´ cache
        market_price = float(prices.get(symbol, {}).get('last_price', h_data.get('cost_basis', 0))) # Fallback v·ªÅ gi√° v·ªën n·∫øu kh√¥ng c√≥ gi√° TT
        cost_basis = h_data.get('cost_basis', 0)
        quantity = h_data.get('quantity', 0)

        market_value = quantity * market_price
        cost_value = quantity * cost_basis
        pnl = market_value - cost_value
        pnl_pct = (pnl / cost_value) * 100 if cost_value else 0
        data_for_df.append({
            "M√£ CK": symbol,
            "KL": quantity,
            "Gi√° v·ªën": f"{cost_basis:,.0f}",
            "Gi√° TT": f"{market_price:,.1f}", # Hi·ªÉn th·ªã gi√° TT ch√≠nh x√°c h∆°n
            "+/- (%)": f"{pnl:,.0f} ({pnl_pct:.1f}%)"
        })

    df = pd.DataFrame(data_for_df)
    # TODO: Th√™m ƒë·ªãnh d·∫°ng m√†u s·∫Øc cho PnL n·∫øu mu·ªën
    st.dataframe(df, use_container_width=True, hide_index=True)

def display_order_list_real():
     st.subheader("S·ªï l·ªánh th∆∞·ªùng")
     orders = st.session_state.get('orders_real', [])
     if not orders:
          st.info("Ch∆∞a c√≥ l·ªánh trong ng√†y.")
          # N√∫t ƒë·ªÉ fetch l·∫°i l·ªánh n·∫øu mu·ªën
          if st.button("T·∫£i l·∫°i danh s√°ch l·ªánh"):
              fetch_account_info()
              st.rerun()
          return

     df_orders = pd.DataFrame(orders[::-1]) # Hi·ªÉn th·ªã l·ªánh m·ªõi nh·∫•t l√™n tr√™n
     if not df_orders.empty:
         # Ch·ªçn l·ªçc v√† ƒë·ªïi t√™n c·ªôt (ƒëi·ªÅu ch·ªânh t√™n c·ªôt d·ª±a tr√™n API response th·ª±c t·∫ø)
         columns_to_show = ['order_id', 'side', 'symbol', 'order_type', 'quantity', 'limit_price', 'status', 'created_at', 'error_message']
         display_columns = {
            'order_id': 'ID L·ªánh', 'side': 'M/B', 'symbol': 'M√£ CK', 'order_type': 'Lo·∫°i',
            'quantity':'KL ƒê·∫∑t', 'limit_price': 'Gi√° ƒê·∫∑t', 'status': 'Tr·∫°ng Th√°i',
            'created_at': 'Th·ªùi gian', 'error_message': 'L·ªói'
         }
         # L·ªçc c√°c c·ªôt t·ªìn t·∫°i trong DataFrame
         existing_cols = [col for col in columns_to_show if col in df_orders.columns]
         df_display = df_orders[existing_cols].rename(columns=display_columns)

         # ƒê·ªãnh d·∫°ng c·ªôt Gi√° ƒê·∫∑t v√† Th·ªùi gian
         if 'Gi√° ƒê·∫∑t' in df_display.columns:
              df_display['Gi√° ƒê·∫∑t'] = df_display.apply(lambda row: f"{row['Gi√° ƒê·∫∑t']/10:,.1f}" if row['Lo·∫°i'] == 'LO' and row['Gi√° ƒê·∫∑t'] else row['Lo·∫°i'], axis=1) # Chia 10 n·∫øu API tr·∫£ gi√° nguy√™n
         if 'Th·ªùi gian' in df_display.columns:
              df_display['Th·ªùi gian'] = pd.to_datetime(df_display['Th·ªùi gian']).dt.strftime('%H:%M:%S %d/%m') # Format th·ªùi gian

         st.dataframe(df_display, use_container_width=True, hide_index=True)
     else:
          st.info("Ch∆∞a c√≥ l·ªánh trong ng√†y.")

     if st.button("T·∫£i l·∫°i danh s√°ch l·ªánh "): # Th√™m kho·∫£ng tr·∫Øng ƒë·ªÉ key kh√°c
          fetch_account_info()
          st.rerun()


# --- Render Giao di·ªán Ch√≠nh ---
display_index_tickers_real()
st.divider()

col_left, col_right = st.columns([3, 1.2]) # ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá c·ªôt

with col_left:
    # display_chart_real() # T·∫°m ·∫©n chart ph·ª©c t·∫°p
    st.info("Bi·ªÉu ƒë·ªì s·∫Ω ƒë∆∞·ª£c t√≠ch h·ª£p sau.") # Placeholder
    tab_orders, tab_holdings = st.tabs(["S·ªï l·ªánh th∆∞·ªùng", "Deal n·∫Øm gi·ªØ"])
    with tab_orders:
         display_order_list_real()
    with tab_holdings:
        display_holdings_real()


with col_right:
    with st.container(border=True):
        display_price_info_real()
    with st.container(border=True):
        display_order_book_real()
    with st.container(border=True):
        display_order_entry_real()
    with st.container(border=True):
         display_balance_real()


# --- T·ª± ƒë·ªông ch·∫°y l·∫°i script ---
if needs_rerun:
     time.sleep(0.1) # Ch·ªù ch√∫t x√≠u
     try:
          st.rerun()
     except Exception as e:
          # X·ª≠ l√Ω l·ªói n·∫øu st.rerun g·∫∑p v·∫•n ƒë·ªÅ (√≠t khi)
          print(f"Error during st.rerun: {e}")
          # C√≥ th·ªÉ ƒë·∫∑t l·∫°i c·ªù ho·∫∑c ƒë·ª£i l√¢u h∆°n
          time.sleep(REFRESH_INTERVAL_SECONDS)
          st.rerun()

else:
     # V·∫´n rerun ƒë·ªãnh k·ª≥ ngay c·∫£ khi kh√¥ng c√≥ update t·ª´ fetch
     time.sleep(REFRESH_INTERVAL_SECONDS)
     try:
          st.rerun()
     except Exception as e:
          print(f"Error during periodic st.rerun: {e}")
          time.sleep(REFRESH_INTERVAL_SECONDS) # ƒê·ª£i l√¢u h∆°n n·∫øu l·ªói
          st.rerun()